<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Perfree</title>
  <icon>https://www.gravatar.com/avatar/75f956f5dde63c5d5400d202c46c8e25</icon>
  <subtitle>学而时习之,不亦说乎</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.perfree.top/"/>
  <updated>2018-06-12T10:49:35.097Z</updated>
  <id>http://www.perfree.top/</id>
  
  <author>
    <name>Perfree</name>
    <email>18339275821@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis Mapper代理的开发方式</title>
    <link href="http://www.perfree.top/2018/06/12/2018-06-12/"/>
    <id>http://www.perfree.top/2018/06/12/2018-06-12/</id>
    <published>2018-06-12T10:07:07.000Z</published>
    <updated>2018-06-12T10:49:35.097Z</updated>
    
    <content type="html"><![CDATA[<p>Mapper接口开发方法只需要程序员编写Mapper接口（相当于Dao接口），由Mybatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。同时mybatis官方也推荐使用mapper代理方法开发mapper接口，程序员不用编写mapper接口实现类，使用mapper代理方法时，输入参数可以使用pojo包装对象或map对象，保证dao的通用性。</p><h2 id="1-开发规范"><a href="#1-开发规范" class="headerlink" title="1.开发规范"></a>1.开发规范</h2><p>(1) Mapper.xml文件中的namespace与mapper接口的类路径相同。<br>(2) Mapper接口方法名和Mapper.xml中定义的每个statement的id相同<br>(3) Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同<br>(4) Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</p><h2 id="2-Mapper-xml映射文件"><a href="#2-Mapper-xml映射文件" class="headerlink" title="2.Mapper.xml映射文件"></a>2.Mapper.xml映射文件</h2><p>定义mapper映射文件UserMapper.xml,需要修改如下几项:</p><p>(1) namespace的值为UserMapper接口的路径<br>(2) parameterType要和接口定义的输入参数类型保持一致<br>(3) resultType同样和接口中定义的输出(返回)参数类型保持一致,如果返回的值类型为List,直接定义为实体存储对象即可,这和selectOne或selectList有关</p><p>代码示例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">    PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">    <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"com.fly.mapper.UserMapper"</span>&gt;</span><br><span class="line">&lt;select id=<span class="string">"findUserById"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line">SELECT * FROM t_user WHERE id = <span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;update id=<span class="string">"updateUserById"</span> parameterType=<span class="string">"user"</span>&gt;</span><br><span class="line">UPDATE t_user SET username = <span class="comment">#&#123;username&#125; WHERE id = #&#123;id&#125;</span></span><br><span class="line">&lt;/update&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><h2 id="3-Mapper-java接口文件"><a href="#3-Mapper-java接口文件" class="headerlink" title="3.Mapper.java接口文件"></a>3.Mapper.java接口文件</h2><p>接口的定义需注意以下几项:</p><p>(1) Mapper接口方法名和Mapper.xml中定义的statement的id相同<br>(2) Mapper接口方法的输入参数类型和mapper.xml中定义的statement的parameterType的类型相同<br>(3) Mapper接口方法的输出参数类型和mapper.xml中定义的statement的resultType的类型相同</p><p>代码示例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.fly.mapper;</span><br><span class="line"></span><br><span class="line">import com.fly.pojo.User;</span><br><span class="line"></span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">//根据id查找用户信息</span><br><span class="line">public User findUserById(int id);</span><br><span class="line">//根据id修改用户名称</span><br><span class="line">public void updateUserById(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-加载Mapper-xml映射文件"><a href="#4-加载Mapper-xml映射文件" class="headerlink" title="4.加载Mapper.xml映射文件"></a>4.加载Mapper.xml映射文件</h2><p>在sqlMapConfig.xml做如下修改(多种方式加载):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">&lt;!-- 通过mapper代理接口加载mapper配置文件mapper接口和映射文件名称相同，且在同一目录下面 --&gt;</span><br><span class="line">&lt;!-- &lt;mapper class=<span class="string">"com.fly.mapper.UserMapper"</span>/&gt; --&gt;</span><br><span class="line">&lt;!-- 单个加载映射文件 --&gt;</span><br><span class="line">&lt;mapper resource=<span class="string">"mapper/UserMapper.xml"</span>/&gt;</span><br><span class="line">&lt;!-- 批量加载映射文件 必须保证mapper配置文件mapper接口和映射文件名称相同且在同一目录下面  --&gt;</span><br><span class="line">&lt;!-- &lt;package name=<span class="string">"com.fly.mapper"</span>/&gt; --&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure></p><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><p>这里使用了junit进行测试:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package com.fly.test;</span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import com.fly.mapper.UserMapper;</span><br><span class="line">import com.fly.pojo.User;</span><br><span class="line"></span><br><span class="line">public class MybatisTest &#123;</span><br><span class="line">private SqlSessionFactory ssf;</span><br><span class="line">@Before</span><br><span class="line">public void createSqlSessionFactory() throws Exception&#123;</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line">InputStream is = Resources.getResourceAsStream(resource);</span><br><span class="line">//使用SqlSessionFactoryBuilder创建sessionFactory</span><br><span class="line">SqlSessionFactoryBuilder ssfb = new SqlSessionFactoryBuilder();</span><br><span class="line">ssf=ssfb.build(is);</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">findUserById</span></span>()&#123;</span><br><span class="line">//获取session</span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">//创建usermapper对象，mybatis自动生成mapper代理对象</span><br><span class="line">UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">//调用代理对象方法</span><br><span class="line">User u = mapper.findUserById(10);</span><br><span class="line">System.out.println(u);</span><br><span class="line">//关闭session</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void <span class="function"><span class="title">updateUserById</span></span>()&#123;</span><br><span class="line">//获取session</span><br><span class="line">SqlSession session = ssf.openSession();</span><br><span class="line">//创建usermapper对象，mybatis自动生成mapper代理对象</span><br><span class="line">UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">User u = new User();</span><br><span class="line">u.setId(10);</span><br><span class="line">u.setUsername(<span class="string">"小钢炮"</span>);</span><br><span class="line">//调用代理对象方法</span><br><span class="line">mapper.updateUserById(u);</span><br><span class="line">//提交</span><br><span class="line">session.commit();</span><br><span class="line">//关闭session</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>(1) selectOne和selectList<br>    如果mapper方法返回单个pojo对象（非集合对象），代理对象内部通过selectOne查询数据库。<br>    如果mapper方法返回集合对象，代理对象内部通过selectList查询数据库。</p><p>(2) namespace<br>    (重申)Mapper.xml文件中的namespace与mapper接口的类路径一定要相同。</p><h2 id="7-最后扩展下-和"><a href="#7-最后扩展下-和" class="headerlink" title="7.最后扩展下#{}和${}"></a>7.最后扩展下#{}和${}</h2><p>(1) #{}</p><pre><code>#{}表示一个占位符号，#{}接收输入参数，类型可以是简单类型，pojo、hashmap。如果接收简单类型，#{}中可以写成value或其它名称。#{}接收pojo对象值，通过OGNL读取对象中的属性值，通过属性.属性.属性...的方式获取对象属性值。</code></pre><p>(2) ${}<br>    ${}表示一个拼接符号，会引用sql注入，所以不建议使用${}<br>    ${}接收输入参数，类型可以是简单类型，pojo、hashmap。<br>    如果接收简单类型，${}中只能写成value。<br>    ${}接收pojo对象值，通过OGNL读取对象中的属性值，通过属性.属性.属性…的方式获取对象属性值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mapper接口开发方法只需要程序员编写Mapper接口（相当于Dao接口），由Mybatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。同时mybatis官方也推荐使用mapper代理方法开发mapper接口，程序员不用编写mapp
      
    
    </summary>
    
      <category term="MyBatis" scheme="http://www.perfree.top/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://www.perfree.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>初次配置使用MyBatis</title>
    <link href="http://www.perfree.top/2018/06/11/2018-06-11/"/>
    <id>http://www.perfree.top/2018/06/11/2018-06-11/</id>
    <published>2018-06-11T08:22:18.000Z</published>
    <updated>2018-06-12T05:27:46.169Z</updated>
    
    <content type="html"><![CDATA[<p>MyBatis是一款支持定制化SQL,存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手工设置参数以及抽取结果集。MyBatis 使用简单的 XML 或注解来配置和映射基本体，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。<a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">官方文档</a></p><hr><h2 id="1-下载MyBatis"><a href="#1-下载MyBatis" class="headerlink" title="1.下载MyBatis"></a>1.下载MyBatis</h2><p><a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">官方下载地址</a><br>这里使用的是<code>mybatis-3.4.6.zip</code><br><img src="https://i.loli.net/2018/06/11/5b1e3ae88c758.png" alt="下载"></p><h2 id="2-导包"><a href="#2-导包" class="headerlink" title="2.导包"></a>2.导包</h2><p>将下载的压缩包解压,导入里边所有jar包(一共13个…),之后再导入所使用的数据库jar包就ok了,这里使用的是MySql数据库</p><h2 id="3-全局配置"><a href="#3-全局配置" class="headerlink" title="3.全局配置"></a>3.全局配置</h2><p>web项目在Java Resources新建config资源目录,在该目录下新建MyBatis全局配置文件sqlMapConfig.xml(名称随意),它包含了数据源和事务管理器等设置和属性信息,基础环境配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt; </span><br><span class="line">&lt;environments default=<span class="string">"development"</span>&gt; </span><br><span class="line">&lt;environment id=<span class="string">"development"</span>&gt; </span><br><span class="line">&lt;transactionManager <span class="built_in">type</span>=<span class="string">"JDBC"</span>/&gt; </span><br><span class="line">&lt;dataSource <span class="built_in">type</span>=<span class="string">"POOLED"</span>&gt; </span><br><span class="line">&lt;!-- 数据库连接配置 --&gt;</span><br><span class="line">&lt;property name=<span class="string">"driver"</span> value=<span class="string">"<span class="variable">$&#123;driver&#125;</span>"</span>/&gt; </span><br><span class="line">&lt;property name=<span class="string">"url"</span> value=<span class="string">"<span class="variable">$&#123;url&#125;</span>"</span>/&gt; </span><br><span class="line">&lt;property name=<span class="string">"username"</span> value=<span class="string">"<span class="variable">$&#123;username&#125;</span>"</span>/&gt; </span><br><span class="line">&lt;property name=<span class="string">"password"</span> value=<span class="string">"<span class="variable">$&#123;password&#125;</span>"</span>/&gt; </span><br><span class="line">&lt;/dataSource&gt; </span><br><span class="line">&lt;/environment&gt; </span><br><span class="line">&lt;environment id=<span class="string">"development2"</span>&gt;</span><br><span class="line">&lt;!--核心映射文件地址,示例如下(可使用相对路径或者绝对路径)--&gt;</span><br><span class="line">&lt;mapper resource=<span class="string">"mapper/UserMapper.xml"</span>/&gt;</span><br><span class="line">&lt;!--绝对路径--&gt;</span><br><span class="line">&lt;mapper url=<span class="string">"file:///var/sqlmaps/AuthorMapper.xml"</span>/&gt;</span><br><span class="line">......</span><br><span class="line">&lt;/environment&gt; </span><br><span class="line">&lt;/environments&gt; </span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><h3 id="3-1-MyBatis-事务管理类"><a href="#3-1-MyBatis-事务管理类" class="headerlink" title="3.1.MyBatis 事务管理类"></a>3.1.MyBatis 事务管理类</h3><p>JDBC - 这个类型直接全部使用 JDBC 的提交和回滚功能。它依靠使用连接的数据源来管理事务的作用域。<br>MANAGED - 这个类型什么不做 ， 它从不提交 、 回滚和关闭连接 。 而是让窗口来管理事务的全部生命周期 。（比如说 Spring 或者JAVAEE 服务器）</p><h3 id="3-2-MyBatis-数据源类型"><a href="#3-2-MyBatis-数据源类型" class="headerlink" title="3.2.MyBatis 数据源类型"></a>3.2.MyBatis 数据源类型</h3><p>UNPOOLED -这个数据源实现只是在每次请求的时候简单的打开和关闭一个连接。虽然这有点慢，但作为一些不需要性能和立即响应简单应用来说 ，不失为一种好选择 。<br>POOLED - 这个数据源缓存 JDBC 连接对象用于避免每次都要连接和生成连接实例而需要的验证时间 。对于并发WEB应用，这种方式非常流行因为它有最快的响应时间。<br>JNDI - 这个数据源实现是为了准备和 Spring 或应用服务一起使用，可以在外部也可以在内部配置这个数据源，然后在JNDI上下文中引用它</p><h2 id="4-log4j"><a href="#4-log4j" class="headerlink" title="4.log4j"></a>4.log4j</h2><p>在config目录下新建log4j.properties复制下方代码:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Global logging configuration</span></span><br><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line"><span class="comment"># Console output...</span></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure></p><h2 id="5-核心映射文件"><a href="#5-核心映射文件" class="headerlink" title="5.核心映射文件"></a>5.核心映射文件</h2><p>在config下新建mapper包,在包内新建UserMapper.xml(名称随意..)参考以下代码:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper     </span><br><span class="line">PUBLIC <span class="string">"-//ibatis.apache.org//DTD Mapper 3.0//EN"</span>    </span><br><span class="line"><span class="string">"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"</span>&gt;  </span><br><span class="line">&lt;mapper namespace=<span class="string">"user"</span> &gt;</span><br><span class="line">&lt;select id =<span class="string">"getUsers"</span> resultType=<span class="string">"com.entiy.User"</span>&gt;</span><br><span class="line">SELECT * FROM USER</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;select id=<span class="string">"findUserById"</span> parameterType=<span class="string">"int"</span> resultType=<span class="string">"com.test.User"</span>&gt;</span><br><span class="line">SELECT * FROM USER WHERE id = <span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><h3 id="5-1-SQL-映射文件结构："><a href="#5-1-SQL-映射文件结构：" class="headerlink" title="5.1.SQL 映射文件结构："></a>5.1.SQL 映射文件结构：</h3><p>注:第一次使用仅作为了解就可以了<br>cache -  配置给定命名空间的缓存。<br>cache-ref –  从其他命名空间引用缓存配置。<br>resultMap  –  最复杂，也是最有力量的元素，用来描述如何从数据库结果集中来加载对象。 <br>sql –  可以重用的 SQL 块，也可以被其他语句引用。<br>insert –  映射插入语句<br>update –  映射更新语句<br>delete –  映射删除语句<br>select –  映射查询语句</p><h2 id="6-Java代码"><a href="#6-Java代码" class="headerlink" title="6.Java代码"></a>6.Java代码</h2><p>这里直接在main方法中写的:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.fly;</span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.List;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import com.entiy.User;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SqlSession session = null;</span><br><span class="line">//声明配置文件</span><br><span class="line">String resource = <span class="string">"sqlMapConfig.xml"</span>;</span><br><span class="line">try &#123;</span><br><span class="line">//读取全局配置文件</span><br><span class="line">InputStream is = Resources.getResourceAsStream(resource);</span><br><span class="line">//创建SqlSessionFactory会话工厂</span><br><span class="line">SqlSessionFactoryBuilder ssfb = new SqlSessionFactoryBuilder();</span><br><span class="line">SqlSessionFactory ssf = ssfb.build(is);</span><br><span class="line">//获取SqlSession会话</span><br><span class="line">session = ssf.openSession();</span><br><span class="line">//拿到结果集放入List集合</span><br><span class="line">List&lt;User&gt; list = session.selectList(<span class="string">"user.getUsers"</span>);</span><br><span class="line">//遍历输出</span><br><span class="line"><span class="keyword">for</span>(User u:list)&#123;</span><br><span class="line">System.out.println(u.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">//关闭资源</span><br><span class="line"><span class="keyword">if</span>(session != null)&#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-1-SqlSessionFactoryBuilder的生命周期："><a href="#6-1-SqlSessionFactoryBuilder的生命周期：" class="headerlink" title="6.1.SqlSessionFactoryBuilder的生命周期："></a>6.1.SqlSessionFactoryBuilder的生命周期：</h3><p>这个类可以被初始 、 使用和丢弃 ， 如果你已经创建好了一个 SqlSessionFactory 后就不用再保留它 。 因此 ，SqlSessionFactoryBuilder 的最好作用域是方法体内，比如说定义一个方法变量。你可以重复使 用SqlSessionFactoryBuilder 生成多个SqlSessionFactory 实例 ， 但是最好不要强行保留 ， 因为 XML 的解析资源要用来做其它更重要的事。</p><h3 id="6-2-SqlSessionFactory："><a href="#6-2-SqlSessionFactory：" class="headerlink" title="6.2.SqlSessionFactory："></a>6.2.SqlSessionFactory：</h3><p>一旦创建， SqlSessionFactory 就会在整个应用过程中始终存在。所以没有理由去销毁和再创建它，一个应用运行中也不建议多次创建 SqlSessionFactory 。 如果真的那样做 ， 会显得很拙劣 。 因此 SqlSessionFactor y最好的作用域是 Application 。可以有多种方法实现。最简单的方法是单例模式或者是静态单例模式 。 然而这既不是广泛赞成和好用的 。 反而 ， 使用 Google Guice 或 Spring 来进行依赖反射会更好 。 这些框架允许你生成管理器来管理 SqlSessionFactory 的单例生命周期。</p><h3 id="6-3-SqlSession："><a href="#6-3-SqlSession：" class="headerlink" title="6.3.SqlSession："></a>6.3.SqlSession：</h3><p>每个线程都有自己的 SqlSession 实例， SqlSession 实例是不能被共享，也是不是线程安全的。因此最好使用 Request 作用域或者方法体作用域。不要使用类的静态变量来引用一个 SqlSession 实例，甚至不要使用类的一个实例变更来引用。如果你正在使用 WEB 框架，应该让 SqlSession 跟随 HTTP 请求的相似作用域。也就是说，在收到一个 HTTP 请求过后，打开 SqlSession ，等返回一个回应以后，立马关掉这个 SqlSession 。 关闭 SqlSession 是非常重要的。你必须要确保 SqlSession 在 finally 方法体中正常关闭</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MyBatis是一款支持定制化SQL,存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手工设置参数以及抽取结果集。MyBatis 使用简单的 XML 或注解来配置和映射基本体，将接口和 Java 的 POJOs(Plain Old 
      
    
    </summary>
    
      <category term="MyBatis" scheme="http://www.perfree.top/categories/MyBatis/"/>
    
    
      <category term="MyBatis" scheme="http://www.perfree.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://www.perfree.top/2018/06/01/hello-world/"/>
    <id>http://www.perfree.top/2018/06/01/hello-world/</id>
    <published>2018-06-01T06:58:42.967Z</published>
    <updated>2018-06-04T10:18:43.116Z</updated>
    
    <content type="html"><![CDATA[<p>第一次使用 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>来搭建个人博客! 还是蛮兴奋的^_^… 下面的信息就作为一个入门的备份吧:</p><ol><li><a href="https://hexo.io/docs/" target="_blank" rel="noopener">hexo官方文档</a> </li><li><a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">故障排除</a></li><li><a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">Hexo/GitHub</a>.</li></ol><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建一个新帖子"><a href="#创建一个新帖子" class="headerlink" title="创建一个新帖子"></a>创建一个新帖子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">写作</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">服务器</a></p><h3 id="生成静态文件-网页"><a href="#生成静态文件-网页" class="headerlink" title="生成静态文件(网页)"></a>生成静态文件(网页)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">生成</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">部署</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一次使用 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;来搭建个人博客! 还是蛮兴奋的^_^… 下面的信息就作为一个入门的备份吧:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https
      
    
    </summary>
    
    
  </entry>
  
</feed>
